;****************************************
; Blower
; 1996-2022
; Amiga version
; Author: Youen CHENE
;
; Palette :
;  1-4 World (Ground - Non Blocking)
;  5-8 World (Wall - Blocking)
;  9-23 Player
;  25-26 Bonus
;  20 Player
;  27-31 Flam Thrower 
;
;****************************************

NoCli
WBStartup
CloseWorkBench_

#RandomArraySize=64

Dim R3A.b(#RandomArraySize)
EVEN
For r.b=0 to #RandomArraySize-1
  R3A(r)=Rnd(3) 
Next



;cfree1.l=ChipFree

DEFTYPE .w
Amiga



;#Debug=0
#skipIntro=0 ;1 to skip intro

#mapWidth=20
#mapHeight=14
#mapSize=280
#levelsCount=7
#initAnimCount=2
#endAnimCount=8
#bulletPerPlayer=2
#waitBullet=30

#speedBullet=3
#stepSizeDefault=4
#stepSizeBoost=6
#maxEnergy=15
#bufferDirection=16
#bufferDirectionWall=24

#ShapeIndexHUDAvatar=32
#ShapeIndexHUDPlayer=48
#ShapeIndexBullet=276
#ShapeIndexBonus=292
#ShapeIndexFlam=192
#ShapeIndexLetters=206
#ShapeIndexAvatars=64
#ShapeIndexTitleScreen=54

#wallColor1=5
#wallColor2=8
#avatarColor1=9
#avatarColor2=23

#energyBulletImpactNormal=1
#energyBulletImpact1=15
#energyBulletImpact2=8
energyBulletImpact.b=#energyBulletImpactNormal
#shotAnim=6
#timerBonusInit=500 ; 5sec

#bufferFlamethrower=4

;CPU Behaviour
#waitBulletCPU=20
#CPUBufferStateInit=35
#CPUBufferMoveTypeAvoidInit=20
#CPUBufferMoveTypeInit=25
#distanceCPUShot=16
#distanceCPU=9
#tooFarCPU=72

chosenWorld.b=-1
chosenMode.b=0

currentWorld.b=2
currentLevel.b=0
nbPlayer.b=4

Dim R7A.b(#RandomArraySize)
EVEN
For r.b=0 to #RandomArraySize-1
   R7A(r)=Rnd(7) 
Next

Dim R2A.b(#RandomArraySize)
EVEN
For r.b=0 to #RandomArraySize-1
   R2A(r)=Rnd(2) 
Next

Dim chosenPlayer.b(4)
EVEN
chosenPlayer(0)=1
chosenPlayer(1)=0
chosenPlayer(2)=-1
chosenPlayer(3)=-1


Dim bonusTimer.b(5)
EVEN
bonusTimer(0)=15
bonusTimer(1)=12
bonusTimer(2)=10
bonusTimer(3)=7
bonusTimer(4)=5


R2Ind.b=0
R3Ind.b=0
R7Ind.b=0

NEWTYPE .Level
  map.b[#mapSize]
End NEWTYPE 

NEWTYPE .player
  x.w
  y.w
  dead.b ;0: alive  2: is going to dead
  direction.b
  animIndex.b
  frameAnim.b
  frameCounter.b
  stepsize.b
  bullets.b
  waitBullet.b
  joy.b
  avatar.b
  energy.b
  previousEnergy.b
  shot.b
  targetPlayer.b
  targetX.w
  targetY.w
  bufDirection.w
  deltaX.w
  deltaY.w
  absDeltaX.w
  absDeltaY.w
  score.w
  bulletImpact.b
  timerBonus.w
  invincible.b
  flameThrower.b
  bufferFlame.b  
  CPUState.b ;0 move and shoot 1 move 
  CPUMoveType.b  ;0 get closer 1  avoid
  CPUBufferState.w 
  CPUBufferMoveType.w 
  CPUTask.b ;Task to do at the frame (performance issue) : 0: calculate move direction 1  1: avoid obstacle
  previousVJoyx.b
  previousVJoyy.b
End NEWTYPE 

NEWTYPE .Bullet
  x.w
  x1.w
  x2.w
  y.w
  y1.w
  y2.w
  direction.b
  animIndex.b
  speed.b
  player.b
  init.b
  endLife.b
  channel.b
  srcAvatar.b
  bulletImpact.b
End NEWTYPE 

NEWTYPE .Bonus
  shapeIndex.b ;0:Energy 1:Flamethrower 2:Random 3:Invincible 4:OneShot 5:Speed 6:2Shots
  x.w
  y.w
  displayed.b ;0  for already displayed, 1 for still one bitmap left, 2 for 2 bitmap left
  removed.b ;0  for already removed, 1 for still one bitmap left, 2 for 2 bitmap left
End NEWTYPE

XINCLUDE MJoy.bb2
XINCLUDE ptplayer_inc.bb2

Statement PrintText{txt$,txtX.w,txtY.w}
  BLITZ
  counter.b = 0
  textLen.b=Len(txt$)
  Dim display.b(textLen) 
  EVEN 
  For i.b = 1 To textLen
      oneString$ = Mid$(txt$, i, 1)
      oneAsc = Asc(oneString$)
      newAsc= oneAsc-48
      if newAsc>17:newAsc=newAsc-7:End If
      if newAsc>36:newAsc=newAsc-32:End If
      Select oneAsc
        Case 32
          newAsc=60
        Case 63
          newAsc=39
        Case 33
          newAsc=38
        Case 45
          newAsc=41
        Case 46
          newAsc=36
        Case 58
          newAsc=40
      End Select
      display(counter) = newAsc
      counter = counter + 1
  Next i
  For i.b = 0 To counter-1
      Blit #ShapeIndexLetters+display(i), txtX+(i LSL 2), txtY
  Next i
End Statement

Statement PaletteWorld{n.b}
  Select n
    Case 0
      PalRGB 1,1,13,13,6
      PalRGB 1,2,5,5,2
      PalRGB 1,3,12,12,5
      PalRGB 1,4,14,14,6
      PalRGB 1,5,9,9,8
      PalRGB 1,6,12,12,12
      PalRGB 1,7,0,15,3
      PalRGB 1,8,0,12,6
    Case 1
      PalRGB 1,1,0,6,6
      PalRGB 1,2,0,6,12
      PalRGB 1,3,0,0,0
      PalRGB 1,4,11,11,11
      PalRGB 1,5,3,3,3
      PalRGB 1,6,6,6,6
      PalRGB 1,7,9,9,9
      PalRGB 1,8,0,12,6
    Case 2 
      PalRGB 1,1,2,13,4
      PalRGB 1,2,4,9,5
      PalRGB 1,3,2,12,6
      PalRGB 1,4,15,9,5
      PalRGB 1,5,9,9,8
      PalRGB 1,6,13,12,10
      PalRGB 1,7,0,6,3
      PalRGB 1,8,11,5,0
    Case 3
      PalRGB 1,1,10,10,10
      PalRGB 1,2,8,8,8
      PalRGB 1,3,9,9,9
      PalRGB 1,4,6,6,6
      PalRGB 1,5,8,5,3
      PalRGB 1,6,12,9,5
      PalRGB 1,7,7,4,2
      PalRGB 1,8,9,6,3
    End Select 
End Statement



Statement UpdateIndexR2A{}
 SHARED R2Ind
  R2Ind=R2Ind+1
  If R2Ind>=#RandomArraySize
    R2Ind=0
  End If
End Statement

Statement UpdateIndexR3A{}
  SHARED R3Ind
  R3Ind=R3Ind+1
  If R3Ind>=#RandomArraySize
    R3Ind=0
  End If
End Statement

Statement UpdateIndexR7A{}
  SHARED R7Ind
  R7Ind=R7Ind+1
  If R7Ind>=#RandomArraySize
    R7Ind=0
  End If
End Statement


;Usage
;a.b=R2A(R2Ind)
;UpdateIndexR2A{}


.Intro:
  QAMIGA
  ; Intro @ Loading - Micrix Production
  flags3.l = $00002 + $00000
  InitCopList 0,44,256,flags3,8,4,0

  VWAIT 100
  Blitz
  CreateDisplay 0
  InitPalette 3,4
  InitPalette 4,4
  PalRGB 3,0,0,0,0
  PalRGB 3,1,6,0,9
  PalRGB 3,2,14,13,15
  PalRGB 3,3,3,0,6
  DisplayPalette 0,3
  Bitmap 7, 320, 256, 2

  Use BitMap 7

  BitMapOutput 7 

  If (#skipIntro<>1)
    Colour 1,0
    Locate 11,12
    NPrint "Micrix Production"

    DisplayPalette 0, 4
    DisplayBitMap 0, 7

    For i.b = 0 to 50
      FadePalette 3, 4, i / 50
      DisplayPalette 0, 4
      VWAIT
    Next

    for xp.w = 0 to 67
      Plot 88+xp*2,104,2
      VWAIT
      Plot 88+xp*2,104,0
    next
    VWAIT 2
    Plot 222,92,2
    VWAIT 2
    Plot 222,92,0
    Plot 221,92,2
    Plot 223,92,2
    Plot 222,91,2
    Plot 222,93,2
    VWAIT 2
    Plot 221,92,0
    Plot 223,92,0
    Plot 222,91,0
    Plot 222,93,0
    Plot 220,92,2
    Plot 224,92,2
    Plot 222,90,2
    Plot 222,94,2
    VWAIT 12
    Plot 220,92,3
    Plot 224,92,3
    Plot 222,90,3
    Plot 222,94,3
    VWAIT 10

    For i.b = 0 to 50
      FadePalette 3, 4, 1-i / 50
      DisplayPalette 0, 4
      VWAIT 2
    Next
    Cls 0
  Else 
    Cls 0
    DisplayBitMap 0, 7
  End If

.Loading:
  QAMIGA
  DisplayPalette 0, 3
  Locate 0,14
  loadTextY.w=14*8
  Colour 3,0

.LoadMusic:
  LoadBank 0,"assets/zik/SunsetRebels-Amiga.mod",2
  addrMod.l=Bank(0)
  MTInstall True
  MTInit 0,0
  MTPlay On

  Bitmap 0,320,224,5; db0 
  Bitmap 1,320,224,5; db1
  Bitmap 2,320,16,5 ;hud 
  ;src
  Bitmap 9, 80, 320, 5 ;Bobs 
  Bitmap 6, 64, 81, 5 ;HUD



.LoadFont:
  Bitmap 8, 244, 15, 2 ;Font
  LoadBitMap 8, "assets/font01.iff"

  for i.b=0 to 60
    GetaShape #ShapeIndexLetters+i,4*i,5,3,5
  next
  Free Bitmap 8

  Use Bitmap 7
  VWAIT 100
  Blitz
  PrintText{"Game created by Youen Chene",10,94}
  PrintText{"For the amiga Blitz Basic Game Jam 2022",10,100}
  PrintText{"Music : Sunset Rebels by Roald Strauss",10,112}
  PrintText{"All SoundFX created with my kids using our mouths and toys",10,118}
  PrintText{"Grafx contribution by TheoTheoderich",10,124}
  PrintText{"Loading game...",10,136}

  QAMIGA

.LoadTiles:
  Bitmap 4, 32, 32, 4 ;World
  LoadBitMap 4, "assets/world1.iff"
  ; Load Tile
  Use Bitmap 4
  GetaShape 0,0,0,16,16
  GetaShape 2,0,16,16,16
  GetaShape 1,16,0,16,16
  GetaShape 3,16,16,16,16
  Free Bitmap 4

  Bitmap 4, 32, 32, 4 ;World
  LoadBitMap 4, "assets/world2.iff"
  ; Load Tile
  Use Bitmap 4
  GetaShape 8,0,0,16,16
  GetaShape 9,16,0,16,16
  GetaShape 11,16,16,16,16
  GetaShape 10,0,16,16,16


  Bitmap 4, 32, 32, 4 ;World
  LoadBitMap 4, "assets/world3.iff"
  ; Load Tile
  Use Bitmap 4
  GetaShape 16,0,0,16,16
  GetaShape 18,0,16,16,16
  GetaShape 17,16,0,16,16
  GetaShape 19,16,16,16,16
  Free Bitmap 4


  Bitmap 4, 32, 32, 4 ;World
  LoadBitMap 4, "assets/world4.iff"
  ; Load Tile
  Use Bitmap 4
  GetaShape 24,0,0,16,16
  GetaShape 26,0,16,16,16
  GetaShape 25,16,0,16,16
  GetaShape 27,16,16,16,16
  Free Bitmap 4

.LoadBobs:

  LoadBitMap 9, "assets/bobs.iff"

  ; Anim
  ;0 : shooted animation
  ;1-4 : walk animation
  Use Bitmap 9
  for j.b=0 to 3
    avatarIndex.w=j LSL 5
    yIndex.w=j LSL 6
    ;top anim
    GetaShape avatarIndex+#ShapeIndexAvatars,64,yIndex+32,16,16 ;shot
    for i.b=0 to 3
      GetaShape avatarIndex+#ShapeIndexAvatars+1+i,16*i,yIndex+32,16,16 ;walk
    next

    ;right anim
    GetaShape avatarIndex+#ShapeIndexAvatars+8,64,yIndex+0,16,16 ;shot
    for i.b=0 to 3
      GetaShape avatarIndex+#ShapeIndexAvatars+8+1+i,16*i,yIndex+0,16,16 ;walk
    next

    ;bottom anim
    GetaShape avatarIndex+#ShapeIndexAvatars+16,64,yIndex+16,16,16 ;shot
    for i.b=0 to 3
      GetaShape avatarIndex+#ShapeIndexAvatars+16+1+i,16*i,yIndex+16,16,16 ;walk
    next

    ;left anim
    for i.b=0 to 4
      CopyShape avatarIndex+#ShapeIndexAvatars+8+i,avatarIndex+#ShapeIndexAvatars+24+i
      XFlip avatarIndex+#ShapeIndexAvatars+24+i
    next

    ;dead
    GetaShape avatarIndex+#ShapeIndexAvatars+7,0,yIndex+48,32,16 ;shot

  next

  ; Bullet Sprite
  ;up & down
  GetaShape #ShapeIndexBullet+8,24,308,7,4
  CopyShape #ShapeIndexBullet+8,#ShapeIndexBullet
  YFlip #ShapeIndexBullet
  GetaShape #ShapeIndexBullet+9,35,304,2,4
  CopyShape #ShapeIndexBullet+9,#ShapeIndexBullet+1
  YFlip #ShapeIndexBullet+1
  GetaShape #ShapeIndexBullet+10,40,306,6,7
  CopyShape #ShapeIndexBullet+10,#ShapeIndexBullet+2
  YFlip #ShapeIndexBullet+2

  ;right & left
  GetaShape #ShapeIndexBullet+4,0,4,4,7
  CopyShape #ShapeIndexBullet+4,#ShapeIndexBullet+12
  XFlip #ShapeIndexBullet+12
  GetaShape #ShapeIndexBullet+5,10,307,4,2
  CopyShape #ShapeIndexBullet+5,#ShapeIndexBullet+13
  XFlip #ShapeIndexBullet+13
  GetaShape #ShapeIndexBullet+6,17,305,7,6
  CopyShape #ShapeIndexBullet+6,#ShapeIndexBullet+14
  XFlip #ShapeIndexBullet+14

  ;Bonus
  For i.b=0 to 4
    GetaShape #ShapeIndexBonus+i,16*i,272,16,16 
  Next
  For i.b=3 to 4
    GetaShape #ShapeIndexBonus+5+i-3,16*i,288,16,16 
  Next

  ;Flame Thrower
  For i.b=0 to 2
    ;Left
    GetaShape #ShapeIndexFlam+3+i,16*i,256,16,16
    ;Right
    CopyShape #ShapeIndexFlam+3+i,#ShapeIndexFlam+9+i
    XFlip #ShapeIndexFlam+9+i
    ;Up
    CopyShape #ShapeIndexFlam+3+i,#ShapeIndexFlam+i
    Rotate #ShapeIndexFlam+i,0.75
    XFlip #ShapeIndexFlam+i
    ;Down
    CopyShape #ShapeIndexFlam+3+i,#ShapeIndexFlam+6+i
    Rotate #ShapeIndexFlam+6+i,0.25
    ;XFlip #ShapeIndexFlam+6+i
  Next

  Free BitMap 9

  Dim levels.Level(#levelsCount)
  EVEN
  GoSub LoadLevels


.LoadHUD:
  ; HUD



  LoadBitMap 6, "assets/hud.iff"
  Use Bitmap 6
  for i.b=0 to 3
    for j.b=0 to 2
      GetaShape #ShapeIndexHUDAvatar+i+j*4,i*16,j*16,16,16
    Next
    GetaShape #ShapeIndexHUDPlayer+1+i,i*16,49,16,16
  next
  GetaShape #ShapeIndexHUDPlayer,0,65,16,16 ; cpu
  Free Bitmap 6

  ; Palette
  InitPalette 0,32
  InitPalette 1,32
  LoadPalette 1, "assets/bobs.iff"
  PalRGB 1,0,0,0,0  ;Reset T0 color to black


  InitPalette 2,32
  LoadPalette 2, "assets/hud.iff" 
  PalRGB 2,0,0,0,0  ;Reset T0 color to black


.LoadSoundEffects:
  LoadSound 0,"assets/snd/gun1amp.iff"
  DEFTYPE .sfx gun2ampB
  LoadSound 1,"assets/snd/gun2amp.iff"
  SFXInit{&gun2ampB,1,64,-1,10}
  LoadSound 2,"assets/snd/shotwall.iff"
  LoadSound 3,"assets/snd/shot.iff"
  LoadSound 4,"assets/snd/dead.iff"
  LoadSound 5,"assets/snd/step-sand.iff"
  LoadSound 6,"assets/snd/step-wood.iff"
  LoadSound 7,"assets/snd/step-grass.iff"
  LoadSound 8,"assets/snd/step-road.iff"
  DEFTYPE .sfx loadgun
  LoadSound 9,"assets/snd/loadgun.iff"
  SFXInit{&loadgun,9,64,-1,10}
  LoadSound 10,"assets/snd/loadgun2.iff"
  LoadSound 11,"assets/snd/flame.iff"
  LoadSound 12,"assets/snd/miam.iff"
  LoadSound 13,"assets/snd/speed.iff"
  LoadSound 14,"assets/snd/fire.iff"
  LoadSound 15,"assets/snd/invicible.iff"

.LoadTitleScreen:
  Bitmap 8, 320, 128, 5
  LoadBitMap 8, "assets/title.iff"
  
  Bitmap 9, 49, 9, 5
  LoadBitMap 9, "assets/title_elements.iff"
  GetaShape #ShapeIndexTitleScreen,0,0,3,5 ; cursor white
  GetaShape #ShapeIndexTitleScreen+1,4,0,3,5 ; cursor other
  GetaShape #ShapeIndexTitleScreen+2,8,0,41,9 ; frame

  Free Bitmap 9

  Bitmap 9, 105, 83, 5
  LoadBitMap 9, "assets/title_neon.iff"
  GetaShape #ShapeIndexTitleScreen+3,0,0,105,31 ; fire back
  GetaShape #ShapeIndexTitleScreen+4,0,32,101,24 ; text neon 1
  GetaShape #ShapeIndexTitleScreen+5,0,58,101,24 ; text neon 2

  Free Bitmap 9

  Bitmap 9, 320, 120, 5

  ;for BBlit
  Buffer 0,16384
  Buffer 1,16384


  ;cfree2.l=ChipFree
  ;cfree.l=(cfree1-cfree2)/1024

  VWAIT 100
  BLITZ
  ;Use Bitmap 7
  ;PrintText{"Memory footprint Chip:"+str$(cfree),10,142}
  ;PrintText{"Remaining Chip:"+str$(cfree2),10,148}
  

  Use Bitmap 7
  for i.b = 0 to 50
    Fadepalette 3, 4,1-i / 50
    DisplayPalette 0, 4
    vwait
  next



.TitleScreen:

  QAMIGA

  flagsTS.l = $00005 + $00000
  flagsTS2.l = $00005 + $00000
  InitCopList 2,44,128,flagsTS,0,32,0
  InitCopList 3,174,120,flagsTS2,0,32,0
  LoadPalette 3, "assets/title.iff" 
  InitPalette 4,32
  LoadPalette 5, "assets/hud.iff"

  VWAIT 100
  Blitz
  CreateDisplay 2,3
  DisplayPalette 2, 4
  DisplayPalette 3, 0
  DisplayBitMap 2, 8
  DisplayBitMap 3, 9
  Free BitMap 7

  Use BitMap 8

  Blit #ShapeIndexTitleScreen+3,107,5 
  Blit #ShapeIndexTitleScreen+5,108,9 

  Use BitMap 9
  Cls 0

  currentLevel.b=0

  menuX.w=70
  menuXPadding.w=40
  Dim menuY.w(4)
  EVEN
  menuY(0)=10 
  menuY(1)=30
  menuY(2)=60
  menuY(3)=75

  PrintText{"Start",menuX,menuY(0)}

  PrintText{"Players",menuX,menuY(1)}
  PrintText{"Player 1",menuX+menuXPadding,menuY(1)-10}
  PrintText{"Player 2",menuX+2*menuXPadding,menuY(1)-10}
  PrintText{"Player 3",menuX+3*menuXPadding,menuY(1)-10}
  PrintText{"Player 4",menuX+4*menuXPadding,menuY(1)-10}


  PrintText{"Mode",menuX,menuY(2)}
  PrintText{"Normal",menuX+menuXPadding,menuY(2)}
  PrintText{"One Shot",menuX+2*menuXPadding,menuY(2)}
  PrintText{"Two Shots",menuX+3*menuXPadding,menuY(2)}

  PrintText{"World",menuX,menuY(3)}
  PrintText{"Random",menuX+menuXPadding,menuY(3)}
  PrintText{"Western",menuX+2*menuXPadding,menuY(3)}
  PrintText{"Manor",menuX+3*menuXPadding,menuY(3)}
  PrintText{"Forest",menuX+4*menuXPadding,menuY(3)}
  PrintText{"City",menuX+5*menuXPadding,menuY(3)}

  For i.b = 0 to 50
    FadePalette 3, 4, i / 50
    DisplayPalette 2, 4
    FadePalette 5, 0, i / 50
    DisplayPalette 3, 0
    VWAIT
  Next


  playerCursor.b=0
  cursorB.b=0
  soundM.b=0
  mi.b=0
  actionBuffer.b=0
  #actionBuf=6
  titleBuffer.b=4
  titleNeon.b=1
  Repeat
    VWAIT
    UnBuffer 0
    cursorB=0
    soundM=0
    If (titleBuffer>0)
      titleBuffer=titleBuffer-1
    Else
      Use BitMap 8
      Blit #ShapeIndexTitleScreen+4+titleNeon,108,9 
      titleNeon=1-titleNeon
      titleBuffer=Rnd(100)
      Use BitMap 9
    End If
    If (actionBuffer > 0)
      actionBuffer=actionBuffer-1
      cursorB=1
    Else
      If (Joyy(1) = 1)
        mi=mi+1
        If mi>3:mi=0:End If
        actionBuffer=#actionBuf
        soundM=1
      End If
      If (Joyy(1)) = -1
        mi=mi-1
        If (mi<0):mi=3:End If
        actionBuffer=#actionBuf
        soundM=1
      End If
      dir.b=Joyx(1)
      btn.b=Joyb(1)
      If (btn <> 0 OR dir.b <> 0)
        If (dir=0):dir=1:End If
        cursorB=1
        soundM=1
        Select mi
          Case 0
            If (btn) 
              MTPlayFX &loadgun
              For i.b = 0 to 50
                FadePalette 3, 4,1-i / 50
                DisplayPalette 2, 4
                FadePalette 5, 0,1-i / 50
                DisplayPalette 3, 0
                VWAIT
              Next
              MTOff
              FlushBuffer 0
              Goto Game
              actionBuffer=#actionBuf
            Else
              cursorB=0
              soundM=0
            End If
          Case 1
            If (btn)
              chosenPlayer(playerCursor)=chosenPlayer(playerCursor)+1
              If (chosenPlayer(playerCursor)>3):chosenPlayer(playerCursor)=-1:End If
              For i.b=0 to (nbPlayer-1) 
                If (i <> playerCursor AND chosenPlayer(i)<>-1) 
                  If (playerCursor=0) ; player 1 can overrride
                    If (chosenPlayer(playerCursor)=chosenPlayer(i))
                      chosenPlayer(i)=-1
                    End If
                  Else
                    If (chosenPlayer(playerCursor)=chosenPlayer(i))
                      chosenPlayer(playerCursor)=chosenPlayer(playerCursor)+1
                      If (chosenPlayer(playerCursor)>3):chosenPlayer(playerCursor)=-1:End If
                    End If
                    For j.b=0 to i-1 
                        If (i <> j AND i <> playerCursor and j <> playerCursor AND chosenPlayer(j)<>-1) 
                          If (chosenPlayer(playerCursor)=chosenPlayer(j))
                            chosenPlayer(playerCursor)=chosenPlayer(playerCursor)+1
                            If (chosenPlayer(playerCursor)>3):chosenPlayer(playerCursor)=-1:End If
                          End If
                        End If
                      Next
                  End If
                End If
              Next
              actionBuffer=#actionBuf
            Else
              playerCursor=playerCursor+dir
              If (playerCursor>3):playerCursor=0:End If
              If (playerCursor<0):playerCursor=3:End If
              actionBuffer=#actionBuf
            End If
          Case 2
            chosenMode=chosenMode+dir
            If (chosenMode>2):chosenMode=0:End If
            If (chosenMode<0):chosenMode=2:End If
            actionBuffer=#actionBuf
          Case 3
            chosenWorld=chosenWorld+dir
            If (chosenWorld>3):chosenWorld=-1:End If
            If (chosenWorld<-1):chosenWorld=3:End If
            actionBuffer=#actionBuf
        End Select
      End If
      If soundM=1:MTPlayFX &gun2ampB:End If
    End If
    ;Update Display
    paddingX.w=0
    If (mi=1):paddingX=menuXPadding*(playerCursor+1):End If
    BBlit 0,#ShapeIndexTitleScreen+cursorB,menuX-6+paddingX,menuY(mi)
    BBlit 0,#ShapeIndexTitleScreen+2,menuX+menuXPadding*(chosenMode+1)-4,menuY(2)-2
    BBlit 0,#ShapeIndexTitleScreen+2,menuX+menuXPadding*(chosenWorld+2)-4,menuY(3)-2
    For i.b=0 to 3
      cjoy.b=chosenPlayer(i)
      If (cjoy >= 0 and cjoy < 2)
        cjoy=1-cjoy ; invert because of port 2 as joy port on amiga
      EndIf
      BBlit  0,#ShapeIndexHUDPlayer+1+cjoy,menuX+menuXPadding*(i+1)+8,menuY(1)
    Next
  Until (RawStatus($45))

  For i.b = 0 to 50
    FadePalette 3, 4,1-i / 50
    DisplayPalette 2, 4
    FadePalette 5, 0,1-i / 50
    DisplayPalette 3, 0
    VWAIT
  Next
  MTEnd
  MTRemove
  AMIGA
  End

.Game:
  QAMIGA
  ;Init CopList
  flags0.l = $00005 + $00000
  flags1.l = $00005 + $00000
  InitCopList 0,44,16,flags0,8,32,0
  InitCopList 1,62,224,flags1,8,32,0

  VWAIT 100
  Blitz
  ;Init data
  ;Init player
  nbPlayer=4
  Dim player.player(nbPlayer)
  EVEN
  
    ;Game Mode  
  Select chosenMode
    Case 1
      energyBulletImpact=#energyBulletImpact1
    Case 2
      energyBulletImpact=#energyBulletImpact2
    Default 
      energyBulletImpact=#energyBulletImpactNormal
  End Select

  For i.b=0 to (nbPlayer-1)
    cp.b=i
    Gosub InitPlayer
    player(i)\score=0
  Next
 
  remainingLevels.b=#levelsCount
  Repeat
    DisplayPalette 1,0
    ;Init data
    For i.b=0 to (nbPlayer-1)
      UsePath player(i)
      cp.b=i
      Gosub InitPlayer
      Select i
      Case 0
        \dead=0
        \x=16
        \y=16
        \direction=1
        \joy=chosenPlayer(0)
        \avatar=0
      Case 1
        \dead=0
        \x=288
        \y=192
        \direction=3
        \joy=chosenPlayer(1)
        \avatar=1
      Case 2
        \dead=0
        \x=288
        \y=16
        \direction=3
        \joy=chosenPlayer(2)
        \avatar=2
      Case 3
        \dead=0
        \x=16
        \y=192
        \direction=1
        \joy=chosenPlayer(3)
        \avatar=3
      End Select
    Next

    ;nbCPU
    nbCPU.b=0
    currentCPU.b=0
    ;Init HUD
    Use Bitmap 2
    Cls 0
    for i=0 to (nbPlayer-1)
      avatar.b=player(i)\avatar
      cjoy.b=player(i)\joy
      If (cjoy >= 0 and cjoy < 2)
        cjoy=1-cjoy ; invert because of port 2 as joy port on amiga
      EndIf
      If cjoy = -1
        nbCPU=nbCPU+1
      End If
      Block #ShapeIndexHUDPlayer+1+cjoy,avatar LSL 6,0
      Block #ShapeIndexHUDAvatar+avatar,16+avatar LSL 6,0
      Boxf 32+avatar LSL 6,15-player(i)\energy,48+avatar LSL 6,15,30
    next

    PrintText{"Level: "+str$(currentLevel+1),256,9}

    remainingPlayers.b=nbPlayer

    currentWorld=chosenWorld
    If (chosenWorld=-1):currentWorld=Rnd(4):End If

    GoSub BuildWorld
    ;World Color
    PaletteWorld{currentWorld}

    ;copy currentmap for performance
    Dim currentMap.b(#mapWidth,#mapHeight)
    For x.b=0 to #mapWidth-1
      For y.b=0 to #mapHeight-1
        currentMap(x,y)=levels(currentLevel)\map[x+y*#mapWidth]
      Next
    Next

    ;hud
    DisplayPalette 0,2
    DisplayBitMap 0,2
    ;main
    InitPalette 0,32
    
    DisplayBitMap 1,0

    CreateDisplay 0,1
    VWait

    Dim List bullets.Bullet(8)
    EVEN

    Dim List sndevents.sfx(8)
    EVEN
    
    flameSFX.w=0

    Dim List bonus.Bonus(3) ;concurrent bonus
    EVEN
    bonusCounter.b=0 ;bonus number
    bonusTimerBuffer.l=bonusTimer(bonusCounter) ; current bonus timer buffer

    timing.l=0 ; timing in second
    timerbuffer.b=0 ; buffer of 50 for 1 second

    DisplayPalette 1,1
    db.b=0 ;double buffering
    MTPlay Off
    MTEnd

    cursorCPU.b=0 

    Repeat
      Gosub GameLoop
    Until (RawStatus($45) OR remainingPlayers<2) ; Escape pressed
    songPos.b=Rnd(13)
    MTInit 0,songPos
    MTPlay On
    ;Who won?
    If (remainingPlayers<2)
      Gosub ScoreEndLevel
    End If
    FlushBuffer 0
    FlushBuffer 1
    currentLevel=currentLevel+1
  Until (RawStatus($45) OR currentLevel>=#levelsCount)
  If (currentLevel>=#levelsCount AND remainingPlayers<2)
    Gosub ScoreEnd
  End If
  Goto TitleScreen

VWAIT 100
BlITZ

.InitPlayer:
  UsePath player(cp)
  \dead=0
  \animIndex=0
  \frameAnim=4
  \frameCounter=0
  \stepsize=#stepSizeDefault
  \bullets=#bulletPerPlayer
  \waitBullet=0
  \energy=#maxEnergy
  \previousEnergy=#maxEnergy
  \targetPlayer=-1
  \bufDirection=#bufferDirection
  \bulletImpact=energyBulletImpact
  \stepsize=#stepSizeDefault
  \invincible=0
  \flameThrower=0
  \timerBonus=0
  \CPUBufferState=#CPUBufferStateInit
  \CPUState=0 ;Start with move and shoot
  \CPUTask=0 
  \CPUMoveType=0 ;Start with move and get closer
  \CPUBufferMoveType=#CPUBufferMoveTypeInit
  Return


.BuildWorld:
  Use Bitmap 0
  Cls 0
  For x.b=0 to (#mapWidth-1)
      For y.b=0 to (#mapHeight-1)
        tile.b=levels(currentLevel)\map[x+y*#mapWidth]
        Block tile-1+currentWorld LSL 3,x LSL 4,y LSL 4
      Next
  Next
  CopyBitMap 0,1 ; for double buffering
  Return


.GameLoop:

  VWait
  DisplayBitMap 1,db
  ;MOVE.w #$f00,$dff180 ; ref
  
  timerBuffer=timerBuffer+1
  timingUpdate.b=0
  If (timerBuffer=50)
    timerBuffer=0
    timing=timing+1
    timingUpdate.b=1
  End If
  ; manage double buffering
  db=1-db
  Use Bitmap db
  
  a.w=0
  ;MOVE.w #$00f,$dff180 ; blue

  UnBuffer db

  ;MOVE.w #$0f0,$dff180 ; green

  Dim cpuWalls.b(3)
  EVEN
  ;  First process dead so they are at the background
  For i.b=0 to (nbPlayer-1)
    UsePath player(i)
    If (\dead>=2)
      a.w=#ShapeIndexAvatars+\avatar LSL 5+7
      Blit a,\x,\y 
      \dead=\dead-1
      If (\dead=2)
        remainingPlayers=remainingPlayers-1
        If (player(b)\joy=-1)
          nbCPU=nbCPU-1
        End If
      EndIf
    EndIf
  Next

  ;MOVE.w #$0ff,$dff180 ;  cyan

  ;Display Bonus
  USEPATH bonus()
  ResetList bonus()
  While NextItem(bonus())
    ;display
    If \displayed>0
      Block #ShapeIndexBonus+\shapeIndex,\x,\y
      \displayed=\displayed-1
    End If
    ;catch by a a player
    For p.b=0 to (nbPlayer-1)
      If (player(p)\dead <> 1)
        If ((\x+8) LSR 4) = ((player(p)\x+8) LSR 4)
          If ((\y+8) LSR 4) = ((player(p)\y+8) LSR 4)
            If \shapeIndex=2
              \shapeIndex=R7A(R7Ind)
              UpdateIndexR7A{}
              If \shapeIndex>1
                \shapeIndex=\shapeIndex+1
              End If
            End If
            Select \shapeIndex
              Case 0 ; Energy
                player(p)\energy=15
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),12,64,2,12}
                    Else
                      SFXInit{&sndevents(),12,64,3,12}
                    End If
                  End If
                End If
              Case 1 ; FlameThrower
                player(p)\flameThrower=1
                player(p)\timerBonus=#timerBonusInit
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),14,64,2,12}
                    Else
                      SFXInit{&sndevents(),14,64,3,12}
                    End If
                  End If
                End If
              Case 3 ; Invincible
                player(p)\invincible=1
                player(p)\timerBonus=#timerBonusInit
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),15,64,2,12}
                    Else
                      SFXInit{&sndevents(),15,64,3,12}
                    End If
                  End If
                End If
              Case 4 ; 1 shots
                player(p)\bulletImpact=#energyBulletImpact1
                player(p)\timerBonus=#timerBonusInit
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),9,64,2,12}
                    Else
                      SFXInit{&sndevents(),9,64,3,12}
                    End If
                  End If
                End If
              Case 5 ; Speed
                player(p)\stepsize=#stepSizeBoost
                player(p)\timerBonus=#timerBonusInit
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),13,64,2,12}
                    Else
                      SFXInit{&sndevents(),13,64,3,12}
                    End If
                  End If
                End If
              Case 6 ; 2shots
                player(p)\bulletImpact=#energyBulletImpact2
                player(p)\timerBonus=#timerBonusInit
                If \removed = -1
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),10,64,2,12}
                    Else
                      SFXInit{&sndevents(),10,64,3,12}
                    Endif
                  End If
                End If
            End Select
            \removed=2
            p=nbPlayer ; exit loop
          End If
        End If
      End If
    Next
    ;remove
    If \removed>0
      tile.b=currentMap(\x LSR 4,\y LSR 4)
      Blit tile-1+currentWorld LSL 3,\x,\y,4 ;Block doesn't support excess
      \removed=\removed-1
      If \removed=0
        KillItem bonus()
      End If
    End If
  Wend

  cursorCPU=0 
  For i.b=0 to (nbPlayer-1)
    ;Select i
    ;  Case 0
        ;MOVE.w #$f00,$dff180 ; red
    ;  Case 1
        ;MOVE.w #$0f0,$dff180 ; green
    ;  Case 2
        ;MOVE.w #$00f,$dff180 ; blue
    ;  Case 3
       ;MOVE.w #$0ff,$dff180 ; cyan 
    ;End Select
       
    UsePath player(i)
    If (\dead <> 1)
      a=0
      If (\dead>0 OR \shot>0)
        ;Has been shoted anim
        If (\shot>0)
          a=#ShapeIndexAvatars+\avatar LSL 5+\direction LSL 3
          \shot=\shot-1
        Else
          If (\dead=2)
            a=#ShapeIndexAvatars+\avatar LSL 5+7
            \dead=\dead-1
            \x=\x-8
            If (\x>272):\x=272:EndIf
            If AddItem(sndevents())
              If \x >= 160
                SFXInit{&sndevents(),4,64,1,11}
              Else
                SFXInit{&sndevents(),4,64,0,11}
              Endif
            End If
          EndIf
        EndIf
      Else
        ; Manage End of bonus
        If (\timerBonus > 0)
          \timerBonus=\timerBonus-1
          If (\timerBonus=0)
            ; End of bonus timer
            \bulletImpact=energyBulletImpact
            \stepsize=#stepSizeDefault
            \invincible=0
            \flameThrower=0
          End If
        End If

        currentJoy.b=\joy
        buttonOn.b=0

        If (currentJoy >= 0  AND currentJoy < 4)
          ; Buffer Joy Button to avoid 2 bullet at the same time 
          If (\waitBullet>0)
            \waitBullet=\waitBullet-1
          Else 
            ;Get Joy Button
            buttonOn=MJoyb{currentJoy}
          EndIf
        Else ;CPU alternate move to Shoot and shoot
          If \CPUBufferState>0
            \CPUBufferState=\CPUBufferState-1
          Else
            \CPUState=1-\CPUState  
            ;If \CPUState=0 ; if move and shoot (0) switch after shoot
            \CPUBufferState=#CPUBufferStateInit 
            ;End If
          End If
          If (\waitBullet>0)
            \waitBullet=\waitBullet-1
          Else
            If \CPUState=0
              If \bullets>0
                If \targetPlayer > -1
                  Select \direction
                    Case 0
                      If (\absDeltaX<#distanceCPUShot)
                        If (\deltaY>0)
                          buttonOn=1
                        End If
                      End If
                    Case 1
                      If (\absDeltaY<#distanceCPUShot)
                        If (\deltaX<0)
                          buttonOn=1
                        End If
                      End If
                    Case 2
                      If (\absDeltaX<#distanceCPUShot)
                        If (\deltaY<0)
                          buttonOn=1
                        End If
                      End If
                    Case 3
                      If (\absDeltaY<#distanceCPUShot)
                        If (\deltaX>0)
                          buttonOn=1
                        End If
                      End If
                  End Select
                End If
              End If
            End If
        End If
        End If

        ; Interaction
        If (buttonOn=0) ;Move or shoot  - 1 move
          vJoyx.b=0
          vJoyy.b=0
          If (currentJoy >= 0  AND currentJoy < 4) ; player move
            ;==== Player
            vJoyy.b=0
            vJoyx.b=MJoyx{currentJoy}
            If vJoyx=0
             vJoyy=MJoyy{currentJoy}
            End If
            If (vJoyx <> 0 OR vJoyy <> 0)
              If vJoyx=1
                \direction=1
              End If 
              If vJoyx=-1
                \direction=3
              End If
              If vJoyy=1
                \direction=2
              End If
              If vJoyy=-1
                \direction=0
              End If 
            End If
          Else ; or cpu move

            If currentCPU=cursorCPU AND \CPUTask=0 ; only one CPU move recalculation by frame (performance issue)
              Gosub CPUMove
              \previousVJoyx=vJoyx
              \previousVJoyy=vJoyy
            Else
              vJoyx=\previousVJoyx
              vJoyy=\previousVJoyy
            End If
          End If

          If (vJoyx <> 0 OR vJoyy <> 0)
            \frameCounter=\frameCounter+1
            If (\frameCounter=\frameAnim)
              ; next move
              next_x.w=\x
              next_y.w=\y
              allowMoveA.b=0
              allowMoveB.b=0
              nextTileA.b=0
              nextTileB.b=0
              ;Wall Collision
              If (\direction=1)
                nextTileA.b=currentMap((next_x+16) LSR 4,(next_y+1) LSR 4)
                nextTileB.b=currentMap((next_x+16) LSR 4,(next_y+14) LSR 4)
              End If
              If (\direction=3)
                nextTileA.b=currentMap((next_x-1) LSR 4,(next_y+1) LSR 4)
                nextTileB.b=currentMap((next_x-1) LSR 4,(next_y+14) LSR 4)
              End If
              If (\direction=0)
                nextTileA.b=currentMap((next_x+3) LSR 4,(next_y-1) LSR 4)
                nextTileB.b=currentMap((next_x+12) LSR 4,(next_y-1) LSR 4)
              End If
              If (\direction=2)
                nextTileA.b=currentMap((next_x+3) LSR 4,(next_y+16) LSR 4)
                nextTileB.b=currentMap((next_x+12) LSR 4,(next_y+16) LSR 4)
              End If

              If nextTileA=1 OR nextTileA=3
                allowMoveA=-1
              End If

              If nextTileB=1 OR nextTileB=3
                allowMoveB=-1
              End If


              ; CPU behavior on wall hit
              If currentJoy = -1
                If currentCPU=cursorCPU ;and \CPUTask=1 ;only one CPU by frame on behavior
                  If (allowMoveA=0 AND allowMoveB=0)
                    nbDir.b=0
                    d1.b=-1
                    d2.b=-1
                    d3.b=-1
                    For d.b=0 to 3
                      If (d<>\direction)
                        tilew.b
                        Select d
                          Case 0
                            tilew=currentMap((next_x+8) LSR 4,(next_y-8) LSR 4)
                          Case 1
                            tilew=currentMap((next_x+24) LSR 4,(next_y+8) LSR 4)
                          Case 2
                            tilew=currentMap((next_x+8) LSR 4,(next_y+24) LSR 4)
                          Case 3
                            tilew=currentMap((next_x-8) LSR 4,(next_y+8) LSR 4)
                        End Select
                        cdir.b=(tilew=1 OR tilew=3)
                       ; STOP
                        If cdir
                          nbDir=nbDir+1
                          If (d1 = -1)
                            d1=d
                          Else 
                            If (d2 = -1)
                              d2=d
                            Else 
                              d3=d
                            End If
                          End If
                        End If
                      End If
                    Next
                    ;STOP
                    IF nbDir > 0
                      If (nbDir=1)
                        \direction=d1
                      End If
                      If (nbDir=2)
                        c.b=R2A(R2Ind)
                        UpdateIndexR2A{}
                        If (c=1)
                          \direction=d2
                        Else 
                          \direction=d1
                        End If
                      End If

                      If (nbDir=3)
                        c.b=R3A(R3Ind)
                        UpdateIndexR3A{}
                        Select c
                          Case 1
                            \direction=d2
                          Case 2 
                            \direction=d1
                          Default
                            \direction=d3
                        End Select
                      End If


                      \bufDirection=#bufferDirectionWall
                    End If
                    

                    ;If (\direction=1 OR \direction=3)
                    ;  If (\deltaY>0)
                    ;    \direction=\direction-1
                    ;  Else
                    ;    \direction=\direction+1
                    ;  End If
                    ;End If 
                    ; If (\direction=0 OR \direction=2)
                    ;  If (\deltaX>0)
                    ;    \direction=\direction-1
                    ;  Else
                    ;    \direction=\direction+1
                    ;  End If
                    ;End If 
                    ;if (\direction > 3):\direction=0:End If
                    ;if (\direction < 0):\direction=3:End If

                  End If
                End If
              End If

             ;MOVE.w #$000,$dff180 ; black 
              ;let's move
              If (allowMoveA AND allowMoveB) ;Move
                If (\direction=1 OR \direction=3)
                  If (vJoyx>0)
                    \x=\x+\stepsize
                  End If
                  If (vJoyx<0)
                    \x=\x-\stepsize
                  End If
                End If
                If (\direction=0 OR \direction=2)
                  If (vJoyy>0)
                    \y=\y+\stepsize
                  End If
                  If (vJoyy<0)
                    \y=\y-\stepsize
                  End If
                End If
              EndIf
              If (allowMoveA AND allowMoveB=0) ;Avoid obstacle
                If (\direction=0 OR \direction=2)
                  \x=\x-1
                Else
                  \y=\y-1
                End If
              EndIf
              If (allowMoveA=0 AND allowMoveB) ;Avoid obstacle
                if (\direction=0 OR \direction=2)
                  \x=\x+1
                Else
                  \y=\y+1
                End If
              End If


              ;Animation
              \frameCounter=0
              If (\animIndex = 3)
                \animIndex=0
                  If AddItem(sndevents())
                    If \x >= 160
                      SFXInit{&sndevents(),5+currentWorld,10,1,5}
                    Else
                      SFXInit{&sndevents(),5+currentWorld,10,0,5}
                    Endif
                  End If
              Else
                \animIndex=\animIndex+1
              Endif
            End If
          End If
        Else
          ; Fire
          \frameCounter=0
          \animIndex=0
          If (\flameThrower=1)
            
            If (\bufferFlame<=0)
              \bufferFlame=#bufferFlamethrower
            Else 
              \bufferFlame=\bufferFlame-1
            End if
            fx.w=0
            fy.w=0
            If flameSFX=0
              If AddItem(sndevents())
                If \x >= 160
                  SFXInit{&sndevents(),11,64,2,11}
                Else
                  SFXInit{&sndevents(),11,64,3,11}
                End If
                flameSFX=52
              End If
            End If
            
            Dim cols.b(nbPlayer-1)
            EVEN
            Select \direction
              Case 0
              ;display
                For f.b=0 to 2
                  fy.w=\y-(f+1) LSL 4
                  If (fy>0 AND fy<208)
                    BBlit db,#ShapeIndexFlam+f,\x,fy
                  End If
                Next
                ;collision
                For p.b=0 to (nbPlayer-1)
                  If (i <> p)
                    If (player(p)\invincible=0)
                      If (player(p)\dead = 0) ; not dead
                        ;Box xb-7,yb-7,xb-7+14,yb-7+14,8;debug
                        If RectsHit(\x,\y-48,16,48,player(p)\x,player(p)\y,16,16)
                        cols.b(p)=-1
                        End IF
                      End If
                    End If
                  End If
                Next
              Case 1
                For f.b=0 to 2
                  fx=\x+(f+1) LSL 4
                  If (fx>0 AND fx<304)
                    BBlit db,#ShapeIndexFlam+3+f,fx,\y
                  End if
                Next
                ;collision
                For p.b=0 to (nbPlayer-1)
                  If (i <> p)
                    If (player(p)\invincible=0)
                      If (player(p)\dead = 0) ; not dead
                        If RectsHit(\x+16,\y,48,16,player(p)\x,player(p)\y,16,16)
                        cols.b(p)=-1
                        End IF
                      End If
                    End If
                  End If
                Next
              Case 2
                For f.b=0 to 2
                  fy.w=\y+(f+1) LSL 4
                  If (fy>0 AND fy<208)
                    BBlit db,#ShapeIndexFlam+6+f,\x,fy
                  End If
                Next
                ;collision
                For p.b=0 to (nbPlayer-1)
                  If (i <> p)
                    If (player(p)\invincible=0)
                      If (player(p)\dead = 0) ; not dead
                        If RectsHit(\x,\y+16,16,48,player(p)\x,player(p)\y,16,16)
                        cols.b(p)=-1
                        End IF
                      End If
                    End If
                  End If
                Next
              Case 3
                For f.b=0 to 2
                  fx=\x-(f+1) LSL 4
                  If (fx>0 AND fx<304)
                    BBlit db,#ShapeIndexFlam+9+f,fx,\y
                  End If
                Next
                ;collision
                For p.b=0 to (nbPlayer-1)
                  If (i <> p)
                    If (player(p)\invincible=0)
                      If (player(p)\dead = 0) ; not dead
                      ;Box \x,\y,\x-48,16,10;debug
                        If RectsHit(\x-48,\y,48,16,player(p)\x,player(p)\y,16,16)
                          cols.b(p)=-1
                        End IF
                      End If
                    End If
                  End If
                Next
            End Select
            If (\bufferFlame=0)
              For p.b=0 to (nbPlayer-1)
                If (cols(p))
                  player(p)\previousEnergy=player(p)\energy
                  player(p)\energy=player(p)\energy-\bulletImpact
                  ;player(p)\shot=#shotAnim ;player can still move
                  a=#ShapeIndexAvatars+\avatar LSL 5+\direction LSL 3
                  If (player(p)\energy <= 0)
                        player(p)\dead=3
                  EndIf
                End If
              Next
            End If
          Else
            If (\waitBullet<=0)
              If (buttonOn)
                If (\bullets>0)
                  If AddItem(bullets())
                    bullets()\direction=\direction
                    If (\direction=0)
                      bullets()\y=\y-4    
                    EndIf
                    If (\direction=1)
                      bullets()\x=\x+15 
                    EndIf
                    If (\direction=2)
                      bullets()\y=\y+15   
                    EndIf
                    If (\direction=3)
                      bullets()\x=\x-4   
                    EndIf
                    bullets()\y1=\y+6
                    bullets()\y2=\y+8
                    bullets()\x1=\x
                    bullets()\x2=\x+3
                    bullets()\animIndex=0
                    bullets()\player=i
                    bullets()\speed=#speedBullet
                    bullets()\init=#initAnimCount
                    bullets()\endLife=-1
                    bullets()\channel=2-\bullets
                    bullets()\srcAvatar=\avatar
                    bullets()\bulletImpact=\bulletImpact
                    ;MOVE.w #$fff,$dff180 ; white
                    if (currentJoy=-1)
                      \waitBullet=#waitBulletCPU
                      ; if shoot then move
                      \CPUState=1
                      \CPUBufferState=#CPUBufferStateInit  
                    Else
                      \waitBullet=#waitBullet
                    End If
                    \bullets=\bullets-1
                    If AddItem(sndevents())
                      sndIndex.b=0
                      If (\bulletImpact>6)
                        sndIndex=1
                      End If
                      If \x >= 160
                        SFXInit{&sndevents(),sndIndex,64,1,10}
                      Else
                        SFXInit{&sndevents(),sndIndex,64,0,10}
                      Endif
                    End If
                  End If
                End If
              End If
            End If
          End If
        End If
        ;MOVE.w #$000,$dff180 ; black
        a=#ShapeIndexAvatars+1+\avatar LSL 5+\direction LSL 3+\animIndex
      End If
      
      ;draw bobs
      If (\x<16):\x=16:EndIf
      If (\x>288):\x=288:EndIf
      If (\y<16):\y=16:EndIf
      If (\y>192):\y=192:EndIf
      If a=0
         a=#ShapeIndexAvatars+1+\avatar LSL 5+\direction LSL 3+\animIndex
      End If 
      If (\invincible=0)
        BBlit db,a,\x,\y 
      Else
        If (db=0)
          BBlit db,a,\x,\y  ;blinking if invincible
        End If
      End If
      ; Debug to Delete
      ;If \CPUTask=0 
      ;  Boxf \avatar LSL 6,0,8+\avatar LSL 6,8,14 ; gray - calcule move
      ;Else
      ;  Boxf \avatar LSL 6,0,8+\avatar LSL 6,8,15 ; purple - avoid
      ;End If
      ;If \CPUState=0
      ;  Boxf 8+\avatar LSL 6,0,16+\avatar LSL 6,8,17 ; blue - move and shoot
      ;Else
      ;  Boxf 8+\avatar LSL 6,0,16+\avatar LSL 6,8,18 ; grey - move
      ;End If
      ;If \CPUMoveType=0
      ;  Boxf 8+\avatar LSL 6,8,16+\avatar LSL 6,16,20 ; green - get closer
      ;Else
      ;  Boxf 8+\avatar LSL 6,8,16+\avatar LSL 6,16,21 ; yellow - avoid
      ;End If
      ; End Debug

      If currentJoy = -1
        If currentCPU=cursorCPU
          \CPUTask=1-\CPUTask ; invert task for next CPU round
        End If
      End If
      If \joy = -1 
        cursorCPU=cursorCPU+1  
      End If

    End If 

  Next

  ;next CPU for Next Frame
  currentCPU=currentCPU+1
  If (currentCPU=nbCPU)
    currentCPU=0
  End If

  ;MOVE.w #$f00,$dff180 ; red

  ;Update and Draw bullets
  USEPATH bullets()
  ResetList bullets()
  While NextItem(bullets())
    tileB.b
    if (\endLife <> -1)
      \animIndex=2
      \endLife=\endLife-1
    Else
      If (\init > 0)
        \init=\init-1
        \animIndex=0
      Else
        bound.b=0
        If (\x<16):\x=16:bound=-1:EndIf
        If (\y<16):\y=16:bound=-1:EndIf
        If (\x>304):\x=295:bound=-1:EndIf
        If (\y>208):\y=200:bound=-1:EndIf
        If bound=0
          If (\direction=0)
            \y=\y-\speed   
            tileB=currentMap(\x2 LSR 4,(\y-1) LSR 4)
          EndIf
          If (\direction=1)
            \x=\x+\speed 
            tileB=currentMap((\x+6) LSR 4,\y2 LSR 4)
          EndIf
          If (\direction=2)
            \y=\y+\speed   
            tileB=currentMap(\x2 LSR 4,(\y+6) LSR 4)
          EndIf
          If (\direction=3)
            \x=\x-\speed 
            tileB=currentMap((\x-1) LSR 4,\y2 LSR 4)
          EndIf
        End If
        \animIndex=1
        colB.b=(tileB=2 OR tileB=4)
        ;Collision with wall
        If (colB OR bound.b)
         bullets()\endLife=#endAnimCount
         If AddItem(sndevents())
            If \x >= 160
              SFXInit{&sndevents(),2,64,1,7}
            Else
              SFXInit{&sndevents(),2,64,0,7}
            Endif
         End If
        EndIf
      EndIf
    EndIf
    xb.w
    yb.w
    If (\direction=0 OR \direction=2)
      yb=\y   
      If (\animIndex=1)
        xb=\x2
      Else
        xb=\x1
      EndIf
    EndIf
    If (\direction=1 OR \direction=3)
      xb=\x
      If (\animIndex=1)
        yb=\y2
      Else
        yb=\y1
      EndIf
    EndIf
    ;Collision with avatars
    if (\endLife = -1)
        xba.b=(xb) LSR 5
        yba.b=(yb) LSR 5
        ;Box xba*32,yba*32,xba*32+32,yba*32+32,26;debug
        For p.b=0 to (nbPlayer-1)
          If (\srcAvatar <> player(p)\avatar)
            If (player(p)\invincible=0)
              ; larg detection on a 32 x 32 blocks
              ;xbo.w=((player(p)\x+8) LSR 5)*32
              ;ybo.w=((player(p)\y+8) LSR 5)*32
              ;Box xbo,ybo,xbo+32,ybo+32,25;debug
              If (((player(p)\x+8) LSR 5) = xba)
                If (((player(p)\y+8) LSR 5) = yba)
                  If (player(p)\dead = 0) ; not dead
                    ;Box xb-7,yb-7,xb+7,yb+7,15;debug
                    ;Box player(p)\x-1,player(p)\y-1,player(p)\x+17,player(p)\y+17,10;debug
                    If RectsHit(xb-7,yb-7,14,14,player(p)\x,player(p)\y,16,16) ; larger to void more calculus
                      bullets()\endLife=#endAnimCount ; End bullet
                      player(p)\previousEnergy=player(p)\energy
                      player(p)\energy=player(p)\energy-\bulletImpact
                      player(p)\shot=#shotAnim
                      ; CPU if been shot new target is the avatar who shot the CPU
                      If player(p)\joy=-1
                        player(p)\targetPlayer=\srcAvatar
                      End If
                      ;End CPU
                      If AddItem(sndevents())
                        If \x >= 160
                          SFXInit{&sndevents(),3,64,1,8}
                        Else
                          SFXInit{&sndevents(),3,64,0,8}
                        Endif
                      End If
                      If (player(p)\energy <= 0)
                        player(p)\dead=3
                      EndIf
                    EndIf
                  EndIf
                EndIf
              EndIf
            EndIf
          EndIf
        Next
    Endif
    ;Display
    If \animIndex=1
      If db=0
        BBlit db,#ShapeIndexBullet+\direction LSL 2+\animIndex,xb,yb
      End If
    Else
      BBlit db,#ShapeIndexBullet+\direction LSL 2+\animIndex,xb,yb
    End If
    If (\endLife=0)
      player(\player)\bullets=player(\player)\bullets+1
      KillItem bullets()  
    Endif

  Wend

  ;MOVE.w #$0f0,$dff180 ; green

  ;Manage Bonus
  If (timingUpdate)
    bonusTimerBuffer=bonusTimerBuffer-1
    If (bonusTimerBuffer=0)
      if bonusCounter < 4:bonusCounter=bonusCounter+1:End If
      bonusTimerBuffer=bonusTimer(bonusCounter)
      bx.w=1+Rnd(#mapWidth-2)
      by.w=1+Rnd(#mapHeight-2)
      tile.b=currentMap(bx,by)
      If (tile=1 OR tile=3)
        If AddItem(bonus())
          bonus()\shapeIndex=R7A(R7Ind)
          UpdateIndexR7A{}
          bonus()\x=bx LSL 4
          bonus()\y=by LSL 4
          bonus()\displayed=2
          bonus()\removed=-1
        End If
      Else
        px.b=R2A(R2Ind)
        UpdateIndexR2A{}
        py.b=R2A(R2Ind)
        UpdateIndexR2A{}
        If (px=0)
          bx=1
        Else
          bx=#mapWidth-2
        End If
        If (py=0)
          by=1
        Else
          yx=#mapHeight-2
        End If
        If AddItem(bonus())
          bonus()\shapeIndex=R7A(R7Ind)
          UpdateIndexR7A{}
          bonus()\x=bx LSL 4
          bonus()\y=by LSL 4
          bonus()\displayed=2
          bonus()\removed=-1
        End If
      EndIf
    End If
  End If

  ;MOVE.w #$00f,$dff180 ; blue

  switchB2.b=0
  ;HUD Update
  For p.b=0 to (nbPlayer-1)
    UsePath player(p)
    if (\dead <> 1)
      If (\energy <> \previousEnergy)
        If (switchB2=0)
            Use Bitmap 2
            switchB2=-1
        End If
        ahud.b=0
        If (\energy < 10)
          ahud=1
        EndIf
        If (\energy < 4)
          ahud=2
        EndIf   
        Block #ShapeIndexHUDAvatar+ahud LSL 2+\avatar,16+\avatar LSL 6,0
        If \previousEnergy>\energy
          Boxf 32+\avatar LSL 6,0,48+\avatar LSL 6,15-\energy,0
        Else
          Boxf 32+\avatar LSL 6,15-\energy,48+\avatar LSL 6,15,30 
        End If
        \previousEnergy=\energy
      End If
    End If
  Next

  ;MOVE.w #$ff0,$dff180 ; yellow

  ;Process sounds
  USEPATH sndevents()
  ResetList sndevents()
  While NextItem(sndevents())
    MTPlayFX &sndevents()
    KillItem sndevents() 
  Wend
  If flameSFX>0
    flameSFX=flameSFX-1
  End If
  ;MOVE.w #$f0f,$dff180 ; purple
  Return

.CPUMove:
  UsePath player(i)
  \deltaX=0
  \deltaY=0
  selected.b=0
  If (\targetPlayer=-1)
      ;Target player to shoot
      For p.b=0 to (nbPlayer-1)
        If selected=0
          If (p<>i)
              If (player(p)\dead = 0)
                target.b=R2A(R2Ind)
                UpdateIndexR2A{}
                If (target=1) 
                    \targetPlayer=p
                    selected=1
                End If
              End If
          End If
        End If
      Next
  ELse
    ;Check if dead
    If (player(\targetPlayer)\dead>0)
      \targetPlayer=-1
    End If
  End If
  ; Move
  If (\targetPlayer>=0) ; if a player is targeted : compute move
    ; directionb buffer
    \bufDirection=\bufDirection-1

    \targetX=player(\targetPlayer)\x
    \targetY=player(\targetPlayer)\y

    \deltaX=\x-\targetX
    \deltaY=\y-\targetY
    \absDeltaX=Abs(\deltaX)
    \absDeltaY=Abs(\deltaY)

    If (\bufDirection=0)
      dirX.b=0
      dirY.b=0
      If (\deltaX>0):dirX=-1:Else:dirX=1:End If
      If (\deltaY>0):dirY=-1:Else:dirY=1:End If

      ;Buffer =0 change direction
      changeDirection.b=0

      If \CPUMoveType=0
        If (\direction=1 OR \direction=3)
          If (\absDeltaY>\absDeltaX AND \absDeltaY>#distanceCPU)
            changeDirection=-1
          End If
        End If
        If (\direction=0 OR \direction=2)
          If (\absDeltaX>\absDeltaY AND \absDeltaX>#distanceCPU)
            changeDirection=-1
          End If
        End If
      Else
        If (\direction=1 OR \direction=3)
            changeDirection=-1
        End If
        If (\direction=0 OR \direction=2)
            changeDirection=-1
        End If
      End If
    
      If (changeDirection)
        If (\direction=1 OR \direction=3)
          If (dirY=1)
            \direction=2
          End If
          If (dirY=-1)
            \direction=0
          End If
        Else
          If (\direction=0 OR \direction=2)
            If (dirX=1)
              \direction=1
            End If 
            If (dirX=-1)
              \direction=3
            End If
          End If
        End If
      Else
        If (\direction=1 OR \direction=3)
          If (dirX=1)
            \direction=1
          End If
          If (dirX=-1)
            \direction=3
          End If
        Else
          If (\direction=0 OR \direction=2)
            If (dirY=1)
              \direction=2
            End If 
            If (dirY=-1)
              \direction=0
            End If
          End If
        End If
      End If
      ;STOP
      \bufDirection=#bufferDirection
    End If
    allowMove.b=0
    If \CPUMoveType=0
      If (\absDeltaY>#distanceCPU OR \absDeltaY>#distanceCPU)
        allowMove=-1
      End If
    End If
    If (allowMove=0)
      ;evaluate si change mode to avoid
      If \absDeltaX>#tooFarCPU OR \absDeltaY>#tooFarCPU ; if too far go closer
        \CPUMoveType=0
        ;\CPUBufferMoveType=#CPUBufferMoveTypeInit
        allowMove=-1
      Else ;Alternate avoid and get closer strategy
        If \CPUBufferMoveType>0
          \CPUBufferMoveType=\CPUBufferMoveType-1
        Else
          \CPUMoveType=1-\CPUMoveType
          If \CPUMoveType=0
            \CPUBufferMoveType=#CPUBufferMoveTypeInit
          Else
            \CPUBufferMoveType=#CPUBufferMoveTypeAvoidInit
          End If
        End If
      End If
    End If
    If \CPUMoveType=1
      allowMove=-1
      ;invertDirection
      If (\bufDirection=#bufferDirection)
        Select \direction
          Case 0
            \direction=2
          Case 1
            \direction=3
          Case 2
            \direction=0
          Case 3
            \direction=1
        End Select
      End If
    End If
    If allowMove
      ;move order
      Select \direction
          Case 0
            vJoyy.b=-1
          Case 1
            vJoyx.b=1
          Case 2
            vJoyy.b=1
          Case 3
            vJoyx.b=-1
        End Select
    End if
  End If
  Return


.ScoreEndLevel:
  winner.b=-1
  Use Bitmap 1-db
  Cls 0
  Use Bitmap 2
  Cls 0
  for i.b=0 to (nbPlayer-1)
    If (player(i)\dead=0)
      UsePath player(i)
      cjoy.b=\joy
      If (cjoy >= 0 and cjoy < 2)
        cjoy=1-cjoy ; invert because of port 2 as joy port on amiga
      EndIf
      Use Bitmap 2
      Block #ShapeIndexHUDPlayer+1+cjoy,48,0
      Block #ShapeIndexHUDAvatar+i,16+48,0
      PrintText{"Player "+str$(i+1)+" WON!",48+42,6}
      Use Bitmap 1-db
      a.w=#ShapeIndexAvatars+1+\avatar LSL 5+\direction LSL 3+\animIndex
      Blit a,\x,\y 
      \score=\score+1
      winner=i
    Else
      Use Bitmap 1-db
      a.w=\avatar LSL 5+#ShapeIndexAvatars+7
      Blit a,\x,\y 
    End If
  Next
  CopyBitMap 1-db, db
  VWait 50
  fb.b=1
  bufferTxt.b=50
  Repeat
    vwait
    DisplayBitMap 1,db
    bufferTxt=bufferTxt-1
    If (bufferTxt=0)
      fb=1-fb
      bufferTxt=25
      Use Bitmap 2
      If (fb=1)
        PrintText{"Press Joy1 button to continue...",180,6}
      Else
        Boxf 180,5,319,13,0
      End If
    End If
  Until (RawStatus($45) OR (MJoyb{1} AND bufferTxt<26)) ; Escape pressed or button opressed

  bufferTxt.b=80
  Use Bitmap 2
  Cls 0
  For p.b=0 to (nbPlayer-1)
    UsePath player(p)
    Block #ShapeIndexHUDAvatar+\avatar,\avatar LSL 5,0
    PrintText{str$(\score),19+\avatar LSL 5,6}
  Next
  Repeat
    vwait
    bufferTxt=bufferTxt-1
    If (bufferTxt=0)
      fb=1-fb
      bufferTxt=25
      Use Bitmap 2
      If (fb=1)
        PrintText{"Press Joy1 button to continue...",180,6}
      Else
        Boxf 180,5,319,13,0
      End If
    End If
  Until (RawStatus($45) OR (MJoyb{1} AND bufferTxt<26)) ; Escape pressed or button opressed
  Return

.ScoreEnd:
  NEWTYPE .playerIndex
    score.w
    pindex.b
  END NEWTYPE

  Dim List listPlayer.playerIndex(4)
  For i.b=0 to 3
    If AddItem(listPlayer())
      listPlayer()\score=player(i)\score
      listPlayer()\pindex=i
    End If
  Next

  SortDown
  SortList listPlayer(),0

  Use BitMap 2
  Cls 0
  PrintText{"Final results",134,6}

  Use BitMap 0
  Cls 0
  DisplayPalette 1,2

  USEPATH listPlayer()
  ResetList listPlayer()
  i.b=0
  While NextItem(listPlayer())
    PrintText{str$(i+1)+".",112,32+6+i LSL 5}
    cjoy.b=player(\pindex)\joy
    If (cjoy >= 0 and cjoy < 2)
      cjoy=1-cjoy ; invert because of port 2 as joy port on amiga
    EndIf
    Block #ShapeIndexHUDAvatar+\pindex,128,128-i LSL 5
    Block #ShapeIndexHUDPlayer+1+cjoy,160,128-i LSL 5
    PrintText{"- "+str$(\score),182,128+6-i LSL 5}
    i=i+1;

  Wend
  DisplayBitMap 1,0
  bufferTxt.b=80
  Repeat
    vwait
    bufferTxt=bufferTxt-1
    If (bufferTxt=0)
      fb.b=1-fb
      bufferTxt=25
      Use Bitmap 0
      If (fb=1)
        PrintText{"Press Joy1 button to continue...",100,180}
      Else
        Boxf 100,180,319,193,0
      End If
    End If
  Until (RawStatus($45) OR (MJoyb{1} AND bufferTxt<26))
  Return


QAMIGA 
.LoadLevels:
  dummy.b 
  For lev.b=0 to (#levelsCount-1)
    If ReadFile(0,"assets/level"+Str$(lev+1)+".dat") 
      ReadMem 0,&dummy,1
      ReadMem 0,&dummy,1
      size.w=#mapSize
      ReadMem 0,&levels(lev)\map,size
    Else
      NPrint "Error reading file."
    EndIf
    CloseFile 0
  Next
  Return
